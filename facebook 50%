import uiautomator2 as ui2
import time
import subprocess

# Connect to the devices
receiver_device_serial = "192.168.226.53:5555"
receiver_device = ui2.Device(receiver_device_serial)
sender_device = ui2.Device(sender_device_serial)

# Acquire wake lock for receiver device
wake_lock_command = f"adb -s {receiver_device_serial} shell svc power stayon true"
subprocess.run(wake_lock_command, shell=True, check=True)

# Open settings on receiver device
settings_command = f"adb -s {receiver_device_serial} shell am start -a android.settings.SETTINGS"
subprocess.run(settings_command, shell=True, check=True)

# Wait for settings activity to open
time.sleep(2)

# Go to SIM Cards on receiver device
#receiver_device(text="SIM cards").click()
#time.sleep(2)

# Disable SIM2 on receiver device
#receiver_device.click(0.848, 0.236)  # Modify the coordinates based on your device's screen
#time.sleep(2)
#receiver_device(text="Yes").click()
#time.sleep(2)

# Collect battery usage data
subprocess.call(["adb", "shell", "dumpsys", "batterystats", "--reset"])
subprocess.call(["adb", "shell", "dumpsys", "batterystats", "--start"])
receiver_device.press('home')
receiver_device(scrollable=True).scroll.toEnd()
time.sleep(2)
receiver_device(resourceId="com.android.launcher3:id/icon", text="Facebook").click()
receiver_device(description="Make a post on Facebook").click()
# Input the desired text into the status update
receiver_device.xpath('//android.widget.ScrollView/android.widget.LinearLayout[1]/android.widget.FrameLayout[1]').set_text("Lava mobile - Rethink what a phone can do")
# Post the status update
receiver_device(description="POST").click()
time.sleep(2)
num_runs = 10
for run in range(num_runs):
 time.sleep(18)
 # Get the dimensions of the device screen
 screen_width, screen_height = receiver_device.window_size()

 # Get the dimensions of the device screen
 screen_width, screen_height = receiver_device.window_size()

 # Define the start and end coordinates for the swipe down gesture
 start_x = screen_width // 2
 start_y = screen_height // 4
 end_x = start_x
 end_y = start_y * 3

 # Perform the swipe down gesture
 receiver_device.swipe(start_x, start_y, end_x, end_y, duration=0.5)
    
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/recent_apps").click()
time.sleep(2)
receiver_device(text="Clear all").click()

# Stop collecting battery usage data
subprocess.call(["adb", "shell", "dumpsys", "batterystats", "--stop"])

# Measure battery current on receiver device
battery_info_command = f"adb -s {receiver_device_serial} shell dumpsys battery"
battery_info = subprocess.check_output(battery_info_command.split()).decode().strip()
print(battery_info)

# Release wake lock for receiver device
wake_lock_release_command = f"adb -s {receiver_device_serial} shell svc power stayon false"
subprocess.run(wake_lock_release_command, shell=True, check=True)

# Wake up the receiver device
wake_up_command = f"adb -s {receiver_device_serial} shell input keyevent KEYCODE_POWER"
subprocess.run(wake_up_command, shell=True, check=True)
time.sleep(2)

# Transfer bug report file from receiver device to local machine or server
subprocess.call(["adb", "pull", "/bugreports", "bugreports"])

# Run Battery Historian on your local machine or server using the transferred bug report file
# Refer to the Battery Historian documentation for detailed instructions on how to start the Battery Historian server
